@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":TeachWhatParser" as TeachWhatParser LOGIC_COLOR
participant ":AddLessonCommandParser" as AddLessonCommandParser LOGIC_COLOR
participant ":AddLessonCommand" as AddLessonCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
participant ":Lesson" as Lesson LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute(**userInput**)
note left of LogicManager
**userInput = ** "addlesson
-n Sec 2 Biology Lesson
-s Biology -a Blk 11 Ang Mo Kio Street 74, #11-04
-d 17-04-2022 -t 18:00 -h 1"
end note
activate LogicManager

LogicManager -> TeachWhatParser : parseCommand(**userInput**)
activate TeachWhatParser

create AddLessonCommandParser
TeachWhatParser -> AddLessonCommandParser
activate AddLessonCommandParser

AddLessonCommandParser --> TeachWhatParser
deactivate AddLessonCommandParser

TeachWhatParser -> AddLessonCommandParser : parse(**commandArguments**)
note right of AddLessonCommandParser
**commandArguments** = "-n Sec 2 Biology Lesson
-s Biology -a Blk 11 Ang Mo Kio Street 74, #11-04
-d 17-04-2022 -t 18:00 -h 1"
end note
activate AddLessonCommandParser

alt is recurring lesson
    AddLessonCommandParser -> Lesson : makeRecurringLesson(**name**, **subject**, **address**, **dateTimeSlot)**

else else
    AddLessonCommandParser -> Lesson : makeTemporaryLesson(**name**, **subject**, **address**, **dateTimeSlot**)

    note right of AddLessonCommandParser
    **name** = "Sec 2 Biology Lesson"
    **subject** = "Biology"
    **address** = "Blk 11 Ang Mo Kio Street 74, #11-04"
    **dateTimeSlot** = "17-04-2022 18:00 1 hour 0 minutes"
    end note
end

AddLessonCommandParser <-- Lesson : lessonToBeAdded

create AddLessonCommand
AddLessonCommandParser -> AddLessonCommand : lessonToBeAdded
activate AddLessonCommand

AddLessonCommand --> AddLessonCommandParser : addLessonCommand
deactivate AddLessonCommand

AddLessonCommandParser --> TeachWhatParser : addLessonCommand
deactivate AddLessonCommandParser

TeachWhatParser --> LogicManager : addLessonCommand
deactivate TeachWhatParser

LogicManager -> AddLessonCommand : execute()
activate AddLessonCommand

AddLessonCommand -> Model : addLesson(lessonToBeAdded)
activate Model
alt does not conflict with any existing lessons
    AddLessonCommand <-- Model
    AddLessonCommand -> Model : setSelectedLesson(lessonToBeAdded)

    create CommandResult
    AddLessonCommand -> CommandResult
    activate CommandResult
    CommandResult --> AddLessonCommand : commandResult
    deactivate CommandResult

    LogicManager <-- AddLessonCommand : commandResult

    [<--LogicManager : commandResult
else else
     AddLessonCommand <-- Model : conflictsWithLessonException
     deactivate Model
     LogicManager <-- AddLessonCommand : commandException
     deactivate AddLessonCommand

     [<--LogicManager : commandException
     deactivate LogicManager

end
@enduml
